let explode (S:string) = 
  List.ofArray (S.ToCharArray())

let implode (L:char list) = 
  new string(List.toArray L)

//
// returns length of the string
//
let rec length L = 
  List.length L

//
// returns # of top 10 letters of the english alphabet in the string
//
let topTen L =
  let topTenLetters = ['e'; 't'; 'a'; 'o'; 'i'; 'n'; 's'; 'h'; 'r'; 'd']
  L |> List.filter (fun c -> List.contains (Char.ToLower c) topTenLetters) |> List.length

//
// returns a dictionary with counts of the top 10 letters
//
let topTenCounts L =
  let topTenLetters = ['e'; 't'; 'a'; 'o'; 'i'; 'n'; 's'; 'h'; 'r'; 'd']
  let freq = System.Collections.Generic.Dictionary<_,_>()
  for letter in topTenLetters do
    freq.[letter] <- 0
  for char in L do
    let c = Char.ToLower char
    if freq.ContainsKey(c) then
      freq.[c] <- freq.[c] + 1
  freq

//
// substitute a series of letters from a given string
//
let substitute L subs =
  L |> List.map (fun c -> if subs.ContainsKey(c) then subs.[c] else c)

[<EntryPoint>]
let main argv =
  printfn "Starting"
  printfn ""

  printf("input> ")
  let input = System.Console.ReadLine()

  let L = explode input
  printfn "exploded: %A" L

  printfn ""
  let len = length L
  printfn "length of sentence: %A" len

  let num = topTen L
  printfn "# of top 10 letters: %A" num

  // print count of each of the top 10 letters
  let counts = topTenCounts L
  for kvp in counts do
    printfn "Letter '%c': %d" kvp.Key kvp.Value
  
  printfn ""
  let S = implode L
  printfn "imploded: %A" S
  printfn ""

  // substitute a series of letters from a given string
  let substitutions = System.Collections.Generic.Dictionary<_,_>()
  substitutions.['a'] <- 'X'
  substitutions.['e'] <- 'Y'
  // add more substitutions as needed

  let substitutedList = substitute L substitutions
  let substitutedString = implode substitutedList
  printfn "After substitutions: %s" substitutedString
  
  printfn ""
  printfn "Done"
  0  // return 0 => success, much like C++
